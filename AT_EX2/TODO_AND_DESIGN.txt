AdvancedTopics EX2:
  
[V] Point - position will inherit from it
[V] PiecePosition - Describe the position on board
[] board - GameBoard will inherit from it
    [] In GameBoard need to change:
        [] function checkAndRunFight to 2 functions - one that checks and one that run the fight and update a fightinfo. Nataly - did something different.
[V] fightInfo - GameBoard
[V] JokerChanged - copy from move
[V] Move - GameMove will inherit from it - copy from move
[] Nataly - Don't need it right now. create moveChecker - two main functions: bool checkMove(Board&,Move&),bool checkJokerChangeValid(Board&,jokerChange&)
Game manager will call this after get move and get joker changed.

[] PlayerAlgorithm - getJokerChange() need to take from move
[] FilePlayerAlgorithm - parse_board + GameBoard + parse move - will update move field and JokerChnaged field. 
   Will have a bool field for isJokerChanged.
   The origin Move from ex1 is being splitted to 2 classes.
[] Liron - LAST TO IMPLEMENT - AutoPlayerAlgorithm - Generate random Files from python 

New:
[] GameManager - GamePlayed::int firstTurn(); - for perform all fights on the initial positions
need to include here GameBoard.h

			- 

Flow of the game:
[1]
Command Line - support the following options:
auto-vs-file		//  first player "auto", second file - read files as player2, as in Ex1
file-vs-auto		//  second player "auto", first file - read files as player1, as in Ex1
auto-vs-auto		//  both players are "auto" - see FAQ below
file-vs-file		//  both players are file based - read files for both, as in Ex1

[2]
Positioning
Game should call PlayerAlgorithm methods:
getInitialPositions(int player); // with 1 - for player 1
getInitialPositions(int player); // with 2 - for player 2
Then perform all fights on the initial positions and call PlayerAlgorithm methods
notifyOnInitialBoard(const Board& b, const std::vector<FightInfo>& fights);
Note: FilePlayerAlgorithm probably ignores the info provided in notifyOnInitialBoard, that is: the method is probably empty in class FilePlayerAlgorithm.

[3]
Moves
Player 1 starts.
[A TURN] For each turn, Game should call on the two PlayerAlgorithms:
getMove();
For the player who just moved:
notifyFightResult(const FightInfo& fightInfo); // only if there was a fight
getJokerChange();
For the other player:
void notifyOnOpponentMove(const Move& move);
void notifyFightResult(const FightInfo& fightInfo); // only if there was a fight
=> go back to [A TURN] for this player

Auto-Player:
Fields:
- player
-GameBoard: On the opponents board: X - Don't know anything about this piece
                                    M- It's a moving piece

Init Board: - Random
            - Optimization: Random position for flog + bomb around it.

Moves:
Scoring function to boards: -Each opponent player piece: -50
                            -Each player piece: +50
                            - Minimal Distance to non-movving piece: we want to get the flag. Clac min distance and then perform 1/min distance.


Passed test for file-vs-file:
Test 2
Test 3
Test 4
Test 5

prev week:
[V] run file tests from ex1
[V] auto generate initial board - need to update game field and generate vector of piece positions.
[V] notifyOnInitialBoard
[V] notifyOnOpponentMove
[V] notifyFightResult
[V] scoringFunction

Current week:
[N] change documentation of game board
[N & L] documentation & code arrangement - document the code and make it more sexy.
[] Run tests
    [] Run Moab tests of ex1 with expected output
[] test on nova
[] improve auto player
    [] improve scoring function
    [] make him change joker?
    [] change to minimax algorithm?
[] GetMove() should return 1-based index :(. I also think that getX() returns the row and not the column not sure what it should be.
[] It is preferable that gameManager would not be familiar with playerAlgorithm implementation.
    Amir claims that the best implementation is empty constructor and setters for setting the players algorithm performed by the main.
